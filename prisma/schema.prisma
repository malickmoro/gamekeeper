// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  username     String?       @unique
  password     String?
  isPrivate    Boolean       @default(false)
  hasCompletedOnboarding Boolean @default(false)
  emailVerified DateTime?
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // NextAuth.js relations
  accounts     Account[]
  sessions     Session[]
  
  // Application relations
  gameSessions GameSession[] @relation("CreatedSessions")
  participants Participant[]
  
  // Friendship relations
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
}

model Game {
  id       String        @id @default(cuid())
  name     String        @unique
  isActive Boolean       @default(true)
  sessions GameSession[]
}

model GameSession {
  id           String        @id @default(cuid())
  code         String        @unique
  game         Game          @relation(fields: [gameId], references: [id])
  gameId       String
  createdBy    User          @relation("CreatedSessions", fields: [creatorId], references: [id])
  creatorId    String
  participants Participant[]
  result       Result?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
}

model Participant {
  id            String      @id @default(cuid())
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  gameSessionId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  joinedAt      DateTime    @default(now())

  @@unique([gameSessionId, userId])
}

model Result {
  id            String      @id @default(cuid())
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  gameSessionId String      @unique
  enteredById   String
  approvedById  String?
  scoreData     Json
  status        String      // 'PENDING', 'APPROVED', 'REJECTED', 'VOID'
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model FriendRequest {
  id          String   @id @default(cuid())
  fromUser    User     @relation("SentFriendRequests", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId  String
  toUser      User     @relation("ReceivedFriendRequests", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId    String
  status      String   @default("PENDING") // 'PENDING', 'ACCEPTED', 'REJECTED'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([fromUserId, toUserId])
}
